syntax="proto3";

//this is the app's name,all proto in this app must use this name as the proto package name
package im;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/im/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for match service
service match{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";
	//	option (pbex.method)="crpc";
	//	option (pbex.method)="grpc";//can be set to one of (get,delete,post,put,patch) or crpc or grpc
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc status(status_req)returns(status_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc do(do_req)returns(do_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc cancel(cancel_req)returns(cancel_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc activities(activities_req)returns(activities_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc cities(cities_req)returns(cities_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
}
//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}

message status_req{
}
message status_resp{
	string lan=1;
	string city=2;
	repeated string regions=3;
	repeated string activities=4;
	uint32 status=5;//0-depend on the fields up(empty:not in matching,not empty:in matching),>0-matched timestamp(unit seconds)
	string matched_region=6;
	string matched_activity=7;
}
message do_req{
	string lan=1[(pbex.string_bytes_in)="zh",
		(pbex.string_bytes_in)="en",
		(pbex.string_bytes_in)="ru",
		(pbex.string_bytes_in)="de",
		(pbex.string_bytes_in)="fr",
		(pbex.string_bytes_in)="ar",
		(pbex.string_bytes_in)="ja",
		(pbex.string_bytes_in)="ko",
		(pbex.string_bytes_in)="hi",
		(pbex.string_bytes_in)="it"];
	string city=2;
	repeated string regions=3[(pbex.map_repeated_len_gt)=0,(pbex.map_repeated_len_lte)=3];
	repeated string activities=4[(pbex.map_repeated_len_gt)=0,(pbex.map_repeated_len_lte)=3];
}
message do_resp{
}
message cancel_req{
}
message cancel_resp{
}
message activity_info{
	string name=1;
	uint32 min=2;
	uint32 max=3;
}
message activities_req{
	string lan=1[(pbex.string_bytes_in)="zh",
		(pbex.string_bytes_in)="en",
		(pbex.string_bytes_in)="ru",
		(pbex.string_bytes_in)="de",
		(pbex.string_bytes_in)="fr",
		(pbex.string_bytes_in)="ar",
		(pbex.string_bytes_in)="ja",
		(pbex.string_bytes_in)="ko",
		(pbex.string_bytes_in)="hi",
		(pbex.string_bytes_in)="it"];
}
message activities_resp{
	repeated activity_info infos=1;
}
message city_info{
	string name=1;
	repeated string regions=2;
}
message cities_req{
	string lan=1[(pbex.string_bytes_in)="zh",
		(pbex.string_bytes_in)="en",
		(pbex.string_bytes_in)="ru",
		(pbex.string_bytes_in)="de",
		(pbex.string_bytes_in)="fr",
		(pbex.string_bytes_in)="ar",
		(pbex.string_bytes_in)="ja",
		(pbex.string_bytes_in)="ko",
		(pbex.string_bytes_in)="hi",
		(pbex.string_bytes_in)="it"];
}
message cities_resp{
	repeated city_info infos=1;
}
